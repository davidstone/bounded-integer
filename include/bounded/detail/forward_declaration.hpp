// Copyright David Stone 2015.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#pragma once

#include <cstdint>
#include <type_traits>

namespace bounded {

enum class storage_type { fast, least };

namespace detail {

// poisoned is true if the type was generated by an operation with a built-in
// integer type -- for instance, multiplying by the literal 5. This turns off
// some strict bounds checking. Without this, it is difficult to combine
// bounded::integer with many standard library implementations.
template<intmax_t minimum, intmax_t maximum, typename overflow_policy, storage_type storage, bool poisoned>
struct basic_integer;

}	// namespace detail

// Does not verify that the value is in range with the policy
constexpr struct non_check_t{} non_check ;

}	// namespace bounded
